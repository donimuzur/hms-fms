Create procedure [dbo].[GetSumData]
AS BEGIN

	DECLARE @LEASE_COST_DATATABLE TABLE(
		TOTAL_LEASE_COST decimal(18,2) NULL,
		VEHICLE_TYPE nvarchar(50) NULL,
		[FUNCTION] nvarchar(50) NULL,
		REGION nvarchar(50) NULL,
		REPORT_MONTH int NULL,
		REPORT_YEAR int NULL
	);

	--Masukkan data ke Lease_Cost_Datatable
	-- CSF --
    MERGE @LEASE_COST_DATATABLE AS Target
    USING (
      SELECT TRA_CSF.CREATED_DATE AS CREATED_DATE, MST_FLEET.VEHICLE_TYPE, MST_FLEET.VEHICLE_FUNCTION AS VEHICLE_FUNCTION, MST_FLEET.REGIONAL, MST_PRICELIST.PRICE AS PRICE
      FROM TRA_CSF
      INNER JOIN MST_FLEET ON MST_FLEET.ENGINE_NUMBER = TRA_CSF.VENDOR_ENGINE_NUMBER
        AND MST_FLEET.CHASIS_NUMBER = TRA_CSF.VENDOR_CHASIS_NUMBER
      INNER JOIN MST_PRICELIST ON MST_PRICELIST.MANUFACTURER = MST_FLEET.MANUFACTURER
        AND MST_PRICELIST.MODEL = MST_FLEET.MODEL
        AND MST_PRICELIST.SERIES = MST_FLEET.SERIES
        AND MST_PRICELIST.YEAR = MST_FLEET.VEHICLE_YEAR
      WHERE TRA_CSF.IS_ACTIVE = 1
    ) AS Source
    ON (Source.PRICE = Target.TOTAL_LEASE_COST OR (Source.PRICE IS NULL AND Target.TOTAL_LEASE_COST IS NULL))
      AND (Source.VEHICLE_TYPE = Target.VEHICLE_TYPE OR (Source.VEHICLE_TYPE IS NULL AND Target.VEHICLE_TYPE IS NULL))
      AND (Source.VEHICLE_FUNCTION = Target.[FUNCTION] OR (Source.VEHICLE_FUNCTION IS NULL AND Target.[FUNCTION] IS NULL))
      AND (Source.REGIONAL = Target.REGION OR (Source.REGIONAL IS NULL AND Target.REGION IS NULL))
      AND (MONTH(Source.CREATED_DATE) = Target.REPORT_MONTH OR (Source.CREATED_DATE IS NULL AND Target.REPORT_MONTH IS NULL))
      AND (YEAR(Source.CREATED_DATE) = Target.REPORT_YEAR OR (Source.CREATED_DATE IS NULL AND Target.REPORT_YEAR IS NULL))
    WHEN NOT MATCHED BY Target THEN
    INSERT ([TOTAL_LEASE_COST]
      ,[VEHICLE_TYPE]
      ,[FUNCTION]
	  ,[REGION]
      ,[REPORT_MONTH]
      ,[REPORT_YEAR])
    VALUES (Source.PRICE
      ,Source.VEHICLE_TYPE
      ,Source.VEHICLE_FUNCTION
	  ,Source.REGIONAL
      ,MONTH(Source.CREATED_DATE)
      ,YEAR(Source.CREATED_DATE));

    -- Temporary --
    MERGE @LEASE_COST_DATATABLE AS Target
    USING (
      SELECT TRA_TEMPORARY.CREATED_DATE AS CREATED_DATE, MST_FLEET.VEHICLE_TYPE, MST_FLEET.VEHICLE_FUNCTION AS VEHICLE_FUNCTION, MST_FLEET.REGIONAL, MST_PRICELIST.PRICE AS PRICE
      FROM TRA_TEMPORARY
      INNER JOIN MST_FLEET ON MST_FLEET.ENGINE_NUMBER = TRA_TEMPORARY.VENDOR_ENGINE_NUMBER
        AND MST_FLEET.CHASIS_NUMBER = TRA_TEMPORARY.VENDOR_CHASIS_NUMBER
      INNER JOIN MST_PRICELIST ON MST_PRICELIST.MANUFACTURER = MST_FLEET.MANUFACTURER
        AND MST_PRICELIST.MODEL = MST_FLEET.MODEL
        AND MST_PRICELIST.SERIES = MST_FLEET.SERIES
        AND MST_PRICELIST.YEAR = MST_FLEET.VEHICLE_YEAR
      WHERE TRA_TEMPORARY.IS_ACTIVE = 1
    ) AS Source
    ON (Source.PRICE = Target.TOTAL_LEASE_COST OR (Source.PRICE IS NULL AND Target.TOTAL_LEASE_COST IS NULL))
      AND (Source.VEHICLE_TYPE = Target.VEHICLE_TYPE OR (Source.VEHICLE_TYPE IS NULL AND Target.VEHICLE_TYPE IS NULL))
      AND (Source.VEHICLE_FUNCTION = Target.[FUNCTION] OR (Source.VEHICLE_FUNCTION IS NULL AND Target.[FUNCTION] IS NULL))
      AND (Source.REGIONAL = Target.REGION OR (Source.REGIONAL IS NULL AND Target.REGION IS NULL))
      AND (MONTH(Source.CREATED_DATE) = Target.REPORT_MONTH OR (Source.CREATED_DATE IS NULL AND Target.REPORT_MONTH IS NULL))
      AND (YEAR(Source.CREATED_DATE) = Target.REPORT_YEAR OR (Source.CREATED_DATE IS NULL AND Target.REPORT_YEAR IS NULL))
    WHEN NOT MATCHED BY Target THEN
    INSERT ([TOTAL_LEASE_COST]
      ,[VEHICLE_TYPE]
      ,[FUNCTION]
	  ,[REGION]
      ,[REPORT_MONTH]
      ,[REPORT_YEAR])
    VALUES (Source.PRICE
      ,Source.VEHICLE_TYPE
      ,Source.VEHICLE_FUNCTION
      ,Source.REGIONAL
      ,MONTH(Source.CREATED_DATE)
      ,YEAR(Source.CREATED_DATE));

	--AC_Datatable
	DECLARE @AC_DATATABLE TABLE(
		ACTUAL_COST decimal(18,2) NULL,
		VEHICLE_TYPE nvarchar(50) NULL,
		[FUNCTION] nvarchar(50) NULL,
		REGION nvarchar(50) NULL,
		REPORT_MONTH int NULL,
		REPORT_YEAR int NULL
	);

	--Masukkan data ke AC_Datatable
	MERGE @AC_DATATABLE AS Target
    USING (
      SELECT MST_FLEET.VEHICLE_TYPE, MST_FLEET.REGIONAL, MST_FLEET.VEHICLE_FUNCTION AS VEHICLE_FUNCTION, TRA_CRF.PRICE AS PRICE, TRA_CRF.CREATED_DATE AS CREATED_DATE
      FROM TRA_CRF
      INNER JOIN MST_FLEET ON MST_FLEET.MST_FLEET_ID = TRA_CRF.MST_FLEET_ID
      WHERE TRA_CRF.IS_ACTIVE = 1
    ) AS Source
    ON (Source.PRICE = Target.ACTUAL_COST OR (Source.PRICE IS NULL AND Target.ACTUAL_COST IS NULL))
      AND (Source.VEHICLE_TYPE = Target.VEHICLE_TYPE OR (Source.VEHICLE_TYPE IS NULL AND Target.VEHICLE_TYPE IS NULL))
      AND (Source.REGIONAL = Target.REGION OR (Source.REGIONAL IS NULL AND Target.REGION IS NULL))
      AND (Source.VEHICLE_FUNCTION = Target.[FUNCTION] OR (Source.VEHICLE_FUNCTION IS NULL AND Target.[FUNCTION] IS NULL))
      AND (MONTH(Source.CREATED_DATE) = Target.REPORT_MONTH OR (Source.CREATED_DATE IS NULL AND Target.REPORT_MONTH IS NULL))
      AND (YEAR(Source.CREATED_DATE) = Target.REPORT_YEAR OR (Source.CREATED_DATE IS NULL AND Target.REPORT_YEAR IS NULL))
    WHEN NOT MATCHED BY Target THEN
    INSERT ([ACTUAL_COST]
      ,[VEHICLE_TYPE]
      ,[FUNCTION]
	  ,[REGION]
      ,[REPORT_MONTH]
      ,[REPORT_YEAR])
    VALUES (Source.PRICE
      ,Source.VEHICLE_TYPE
      ,Source.VEHICLE_FUNCTION
      ,Source.REGIONAL
      ,MONTH(Source.CREATED_DATE)
      ,YEAR(Source.CREATED_DATE));

    -- CSF --
    MERGE @AC_DATATABLE AS Target
    USING (
      SELECT TRA_CSF.CREATED_DATE AS CREATED_DATE, MST_FLEET.VEHICLE_TYPE, MST_FLEET.REGIONAL, MST_FLEET.VEHICLE_FUNCTION AS VEHICLE_FUNCTION, MST_PRICELIST.PRICE AS PRICE
      FROM TRA_CSF
      INNER JOIN MST_FLEET ON MST_FLEET.ENGINE_NUMBER = TRA_CSF.VENDOR_ENGINE_NUMBER
        AND MST_FLEET.CHASIS_NUMBER = TRA_CSF.VENDOR_CHASIS_NUMBER
      INNER JOIN MST_PRICELIST ON MST_PRICELIST.MANUFACTURER = MST_FLEET.MANUFACTURER
        AND MST_PRICELIST.MODEL = MST_FLEET.MODEL
        AND MST_PRICELIST.SERIES = MST_FLEET.SERIES
        AND MST_PRICELIST.YEAR = MST_FLEET.VEHICLE_YEAR
      WHERE TRA_CSF.IS_ACTIVE = 1
    ) AS Source
    ON (Source.PRICE = Target.ACTUAL_COST OR (Source.PRICE IS NULL AND Target.ACTUAL_COST IS NULL))
      AND (Source.VEHICLE_TYPE = Target.VEHICLE_TYPE OR (Source.VEHICLE_TYPE IS NULL AND Target.VEHICLE_TYPE IS NULL))
      AND (Source.REGIONAL = Target.REGION OR (Source.REGIONAL IS NULL AND Target.REGION IS NULL))
      AND (Source.VEHICLE_FUNCTION = Target.[FUNCTION] OR (Source.VEHICLE_FUNCTION IS NULL AND Target.[FUNCTION] IS NULL))
      AND (MONTH(Source.CREATED_DATE) = Target.REPORT_MONTH OR (Source.CREATED_DATE IS NULL AND Target.REPORT_MONTH IS NULL))
      AND (YEAR(Source.CREATED_DATE) = Target.REPORT_YEAR OR (Source.CREATED_DATE IS NULL AND Target.REPORT_YEAR IS NULL))
    WHEN NOT MATCHED BY Target THEN
    INSERT ([ACTUAL_COST]
      ,[VEHICLE_TYPE]
      ,[FUNCTION]
	  ,[REGION]
      ,[REPORT_MONTH]
      ,[REPORT_YEAR])
    VALUES (Source.PRICE
      ,Source.VEHICLE_TYPE
      ,Source.VEHICLE_FUNCTION
      ,Source.REGIONAL
      ,MONTH(Source.CREATED_DATE)
      ,YEAR(Source.CREATED_DATE));
    -- CTF --
    MERGE @AC_DATATABLE AS Target
    USING (
      SELECT TRA_CTF.BUY_COST_TOTAL AS BUY_COST_TOTAL, TRA_CTF.CREATED_DATE AS CREATED_DATE, MST_FLEET.VEHICLE_TYPE, MST_FLEET.REGIONAL, MST_FLEET.VEHICLE_FUNCTION AS VEHICLE_FUNCTION
      FROM TRA_CTF
      INNER JOIN MST_FLEET ON MST_FLEET.POLICE_NUMBER = TRA_CTF.POLICE_NUMBER
      WHERE TRA_CTF.IS_ACTIVE = 1
    ) AS Source
    ON (Source.BUY_COST_TOTAL = Target.ACTUAL_COST OR (Source.BUY_COST_TOTAL IS NULL AND Target.ACTUAL_COST IS NULL))
      AND (Source.VEHICLE_TYPE = Target.VEHICLE_TYPE OR (Source.VEHICLE_TYPE IS NULL AND Target.VEHICLE_TYPE IS NULL))
      AND (Source.REGIONAL = Target.REGION OR (Source.REGIONAL IS NULL AND Target.REGION IS NULL))
      AND (Source.VEHICLE_FUNCTION = Target.[FUNCTION] OR (Source.VEHICLE_FUNCTION IS NULL AND Target.[FUNCTION] IS NULL))
      AND (MONTH(Source.CREATED_DATE) = Target.REPORT_MONTH OR (Source.CREATED_DATE IS NULL AND Target.REPORT_MONTH IS NULL))
      AND (YEAR(Source.CREATED_DATE) = Target.REPORT_YEAR OR (Source.CREATED_DATE IS NULL AND Target.REPORT_YEAR IS NULL))
    WHEN NOT MATCHED BY Target THEN
    INSERT ([ACTUAL_COST]
      ,[VEHICLE_TYPE]
      ,[FUNCTION]
	  ,[REGION]
      ,[REPORT_MONTH]
      ,[REPORT_YEAR])
    VALUES (Source.BUY_COST_TOTAL
      ,Source.VEHICLE_TYPE
      ,Source.VEHICLE_FUNCTION
      ,Source.REGIONAL
      ,MONTH(Source.CREATED_DATE)
      ,YEAR(Source.CREATED_DATE));

    -- Temporary --
    MERGE @AC_DATATABLE AS Target
    USING (
      SELECT TRA_TEMPORARY.CREATED_DATE AS CREATED_DATE, MST_FLEET.VEHICLE_TYPE, MST_FLEET.REGIONAL, MST_FLEET.VEHICLE_FUNCTION AS VEHICLE_FUNCTION, MST_PRICELIST.PRICE AS PRICE
      FROM TRA_TEMPORARY
      INNER JOIN MST_FLEET ON MST_FLEET.ENGINE_NUMBER = TRA_TEMPORARY.VENDOR_ENGINE_NUMBER
        AND MST_FLEET.CHASIS_NUMBER = TRA_TEMPORARY.VENDOR_CHASIS_NUMBER
      INNER JOIN MST_PRICELIST ON MST_PRICELIST.MANUFACTURER = MST_FLEET.MANUFACTURER
        AND MST_PRICELIST.MODEL = MST_FLEET.MODEL
        AND MST_PRICELIST.SERIES = MST_FLEET.SERIES
        AND MST_PRICELIST.YEAR = MST_FLEET.VEHICLE_YEAR
      WHERE TRA_TEMPORARY.IS_ACTIVE = 1
    ) AS Source
    ON (Source.PRICE = Target.ACTUAL_COST OR (Source.PRICE IS NULL AND Target.ACTUAL_COST IS NULL))
      AND (Source.VEHICLE_TYPE = Target.VEHICLE_TYPE OR (Source.VEHICLE_TYPE IS NULL AND Target.VEHICLE_TYPE IS NULL))
      AND (Source.REGIONAL = Target.REGION OR (Source.REGIONAL IS NULL AND Target.REGION IS NULL))
      AND (Source.VEHICLE_FUNCTION = Target.[FUNCTION] OR (Source.VEHICLE_FUNCTION IS NULL AND Target.[FUNCTION] IS NULL))
      AND (MONTH(Source.CREATED_DATE) = Target.REPORT_MONTH OR (Source.CREATED_DATE IS NULL AND Target.REPORT_MONTH IS NULL))
      AND (YEAR(Source.CREATED_DATE) = Target.REPORT_YEAR OR (Source.CREATED_DATE IS NULL AND Target.REPORT_YEAR IS NULL))
    WHEN NOT MATCHED BY Target THEN
    INSERT ([ACTUAL_COST]
      ,[VEHICLE_TYPE]
      ,[FUNCTION]
	  ,[REGION]
      ,[REPORT_MONTH]
      ,[REPORT_YEAR])
    VALUES (Source.PRICE
      ,Source.VEHICLE_TYPE
      ,Source.VEHICLE_FUNCTION
      ,Source.REGIONAL
      ,MONTH(Source.CREATED_DATE)
      ,YEAR(Source.CREATED_DATE));

	--Accident_Datatable
	DECLARE @ACCIDENT_DATATABLE TABLE(
		ACCIDENT_COUNT int NULL,
		VEHICLE_TYPE nvarchar(50) NULL,
		[FUNCTION] nvarchar(50) NULL,
		REGION nvarchar(50) NULL,
		REPORT_MONTH int NULL,
		REPORT_YEAR int NULL
	);

	--Masukkan data ke Accident_Datatable
	MERGE @ACCIDENT_DATATABLE AS Target
	USING (
		select COUNT(C.TRA_CAF_ID) AS ACCIDENT_COUNT, F.VEHICLE_TYPE, F.VEHICLE_FUNCTION, F.REGIONAL, 
		MONTH(C.CREATED_DATE) AS REPORT_MONTH, YEAR(C.CREATED_DATE) AS REPORT_YEAR
		FROM TRA_CAF C JOIN MST_FLEET F ON C.POLICE_NUMBER = F.POLICE_NUMBER
		GROUP BY F.VEHICLE_TYPE, F.VEHICLE_FUNCTION, F.REGIONAL, C.CREATED_DATE, MONTH(C.CREATED_DATE)
	) AS Source
	On (Source.REPORT_MONTH = Target.REPORT_MONTH)
	AND (Source.REPORT_YEAR = Target.REPORT_YEAR)
	WHEN NOT MATCHED BY TARGET THEN
		INSERT (ACCIDENT_COUNT, VEHICLE_TYPE, [FUNCTION], REGION, REPORT_MONTH, REPORT_YEAR)
		VALUES( Source.ACCIDENT_COUNT, Source.VEHICLE_TYPE, Source.VEHICLE_FUNCTION, Source.REGIONAL, 
		Source.REPORT_MONTH, Source.REPORT_YEAR);

	--Odometer_Datatable
	DECLARE @ODOMETER_DATATABLE TABLE(
		TOTAL_KM decimal(18,2) NULL,
		VEHICLE_TYPE nvarchar(50) NULL,
		[FUNCTION] nvarchar(50) NULL,
		REGION nvarchar(50) NULL,
		REPORT_MONTH int NULL,
		REPORT_YEAR int NULL
	);

	--Masukkan data ke Odometer_Datatable
	MERGE @ODOMETER_DATATABLE AS Target
	USING (
		select FO.LAST_KM, MAX(FO.LAST_KM) AS TOTAL_KM, FO.VEHICLE_TYPE, CC.FUNCTION_NAME, LM.REGION,
		FO.CREATED_DATE 
		FROM MST_FUEL_ODOMETER FO
		JOIN MST_EMPLOYEE E ON FO.EMPLOYEE_ID = E.EMPLOYEE_ID
		JOIN MST_FUNCTION_GROUP CC ON E.COST_CENTER = CC.COST_CENTER
		JOIN MST_LOCATION_MAPPING LM ON E.CITY = LM.LOCATION
		GROUP BY FO.LAST_KM, FO.VEHICLE_TYPE, CC.FUNCTION_NAME, LM.REGION, FO.CREATED_DATE
	) AS Source
	On (Source.REGION = Target.REGION OR (Source.REGION IS NULL AND Target.REGION IS NULL))
	AND (Source.FUNCTION_NAME = Target.[FUNCTION] OR (Source.FUNCTION_NAME IS NULL AND Target.[FUNCTION] IS NULL))
	AND (MONTH(Source.CREATED_DATE) = Target.REPORT_MONTH)
	AND (YEAR(Source.CREATED_DATE) = Target.REPORT_YEAR)
	WHEN NOT MATCHED BY TARGET THEN
		INSERT (TOTAL_KM, VEHICLE_TYPE, [FUNCTION], REGION, REPORT_MONTH, REPORT_YEAR)
		VALUES( Source.TOTAL_KM - Source.LAST_KM, Source.VEHICLE_TYPE, Source.FUNCTION_NAME, Source.REGION,
		MONTH(Source.CREATED_DATE), YEAR(Source.CREATED_DATE));

	--Masukkan data ke table Sum_Report_Data
	MERGE SUM_REPORT_DATA AS Target
	USING (
		select NV.NO_OF_VEHICLE, LC.TOTAL_LEASE_COST, LF.TOTAL_LITER, FC.TOTAL_FUEL_COST, OD.TOTAL_KM, 
		OB.ACTUAL_COST, AC.ACCIDENT_COUNT, NV.VEHICLE_TYPE, NV.[FUNCTION], NV.REGION, 
		MONTH(NV.CREATED_DATE) AS REPORT_MONTH, YEAR(NV.CREATED_DATE) AS REPORT_YEAR, NV.CREATED_DATE 
		FROM NO_OF_VEHICLE_REPORT_DATA NV 
		JOIN @LEASE_COST_DATATABLE LC ON NV.[FUNCTION] = LC.[FUNCTION] 
		AND NV.VEHICLE_TYPE = LC.VEHICLE_TYPE AND NV.REGION = LC.REGION
		AND NV.REPORT_MONTH = LC.REPORT_MONTH AND NV.REPORT_YEAR = LC.REPORT_YEAR 
		JOIN LITER_BY_FUNC_REPORT_DATA LF ON NV.[FUNCTION] = LF.[FUNCTION] 
		AND NV.VEHICLE_TYPE = LF.VEHICLE_TYPE AND NV.REGION = LF.REGION
		AND NV.REPORT_MONTH = LF.REPORT_MONTH AND NV.REPORT_YEAR = LF.REPORT_YEAR 
		JOIN FUEL_COST_BY_FUNC_REPORT_DATA FC ON NV.[FUNCTION] = FC.[FUNCTION] 
		AND NV.VEHICLE_TYPE = FC.VEHICLE_TYPE AND NV.REGION = FC.REGION
		AND NV.REPORT_MONTH = FC.REPORT_MONTH AND NV.REPORT_YEAR = FC.REPORT_YEAR 
		JOIN @AC_DATATABLE OB ON NV.[FUNCTION] = OB.[FUNCTION] 
		AND NV.VEHICLE_TYPE = OB.VEHICLE_TYPE AND NV.REGION = OB.REGION
		AND NV.REPORT_MONTH = OB.REPORT_MONTH AND NV.REPORT_YEAR = OB.REPORT_YEAR 
		JOIN ACCIDENT_REPORT_DATA AC ON NV.[FUNCTION] = AC.[FUNCTION] 
		AND NV.VEHICLE_TYPE = AC.VEHICLE_TYPE AND NV.REGION = AC.REGION
		AND NV.REPORT_MONTH = AC.REPORT_MONTH AND NV.REPORT_YEAR = AC.REPORT_YEAR 
		JOIN @ODOMETER_DATATABLE OD ON NV.[FUNCTION] = OD.[FUNCTION] 
		AND NV.VEHICLE_TYPE = OD.VEHICLE_TYPE AND NV.REGION = OD.REGION
		AND NV.REPORT_MONTH = OD.REPORT_MONTH AND NV.REPORT_YEAR = OD.REPORT_YEAR
	) AS Source
	On (Source.CREATED_DATE = Target.CREATED_DATE)
	WHEN NOT MATCHED BY TARGET THEN
		INSERT (TOTAL_VEHICLE, TOTAL_VEHICLE_COST, TOTAL_FUEL_AMOUNT, TOTAL_FUEL_COST, TOTAL_KM, 
		TOTAL_OPERATIONAL_COST, ACCIDENT_COUNT, VEHICLE_TYPE, [FUNCTION], REGION, REPORT_MONTH, REPORT_YEAR, 
		CREATED_DATE)
		VALUES( Source.NO_OF_VEHICLE, Source.TOTAL_LEASE_COST, Source.TOTAL_LITER, Source.TOTAL_FUEL_COST, 
		Source.TOTAL_KM, Source.ACTUAL_COST, Source.ACCIDENT_COUNT, Source.VEHICLE_TYPE, Source.[FUNCTION], 
		Source.REGION, Source.REPORT_MONTH, Source.REPORT_YEAR, Source.CREATED_DATE);

END